Этот файл для вопросов студента и комментариев по результатам код-ревью.

Вопросы:
 - Какого типа данных должны быть поля с суммами в витрине: int или numeric?

Комментарии к исправлению замечаний ревьювера:
 - Замечание:
     Ты запускаешь даг каждые 15 минут, а в витрине месячный разрез
     Если пересчитывать витрину каждые 15 минут, то данные в ней должны обновляться по каждому курьеру. 
     И фильтровать по id курьера тут тоже не надо, ведь о полученных им деньгах надо обновлять информацию
 - Комментарий к исправлению:
     Да, согласен, я напортачил с тем, что courier_id попадающий в отчёт может вообще не меняться,
     и поэтому его нельзя использовать как WF_KEY в том виде, как я это сделал.
     
     Когда бы я не запускал даг, он будет выбирать только нужные даты для отсчёта из-за наличия ограничения
     в SQL скрипте:
     """
     WHERE
         DATE_PART('year', order_ts) = DATE_PART('year', CURRENT_DATE) AND
         DATE_PART('month', order_ts) = DATE_PART('month', CURRENT_DATE) - 1
     """
     Но поскольку отчёт группируется по курьерам за период в 1 месяц, то я могу поделить его на батчи
     либо по курьерам, либо вовсе не делить и делать 1 транзакцию в месяц. Если делать второй вариант,
     то можно сделать расписание запуска через запуск дага и обязательно нужна проверка на дубли,
     например через ON CONFLICT. Так я и сделал/исправил: теперь даг запускается каждое 2-ое число месяца,
     а WF_KEY это timestamp последнего загруженного отчёта. Я поставил необходимую разницу в 20 дней, т.к.
     по условию задания отчёт должен быть готов не позднее 10-го числа след. месяца.
     Также добавил ON CONFLICT часть в SQL скрипт, в случае если будет сбой системы и нужно по новой перезагрузить данные.

- Замечание:
      При заполнении dds и cdm у нас идет перенос данных исключительно в SQL. Значит можно обойтись только SQL запросами,
      не строя сложную логику на питоне. Также с помощью контекста Airflow грузить данные за определенный временной промежуток.
- Комментарий:
      Я понимаю, что можно и так, но поскольку я уже немного отстаю от программы и в самом спринте уже предложили готовую,
      рабочую модель, которая мне полностью понятна, то я использовал её. К тому у обоих моделей есть свои плюсы и минусы.
      Мне, например, проще развивать python-native код и через него реализовывать сложные преобразования данных, чем через SQL.
